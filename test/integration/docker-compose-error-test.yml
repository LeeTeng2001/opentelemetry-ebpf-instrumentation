version: "3.8"

services:
  testserver:
    build:
      context: ../..
      dockerfile: test/integration/components/testserver/Dockerfile
    image: hatest-testserver
    ports:
      - "8080:8080"
    environment:
      LOG_LEVEL: DEBUG
    depends_on:
      otelcol:
        condition: service_started
      jaeger:
        condition: service_started

  obi:
    build:
      context: ../..
      dockerfile: ./test/integration/components/ebpf-instrument/Dockerfile
    command:
      - --config=/configs/obi-config-error-test.yml
    volumes:
      - ./configs/:/configs
      - ./system/sys/kernel/security:/sys/kernel/security
      - ../../testoutput:/coverage
      - ../../testoutput/run-error:/var/run/beyla
    image: hatest-obi
    # Give basic capabilities but remove BPF capability to force eBPF loading errors
    cap_add:
      - SYS_ADMIN
      - SYS_PTRACE
      - DAC_READ_SEARCH
      - PERFMON
    cap_drop:
      - ALL
    pid: "host"
    depends_on:
      testserver:
        condition: service_started
      otelcol:
        condition: service_started
      prometheus:
        condition: service_started
    environment:
      GOCOVERDIR: "/coverage"
      OTEL_EBPF_METRICS_FEATURES: "application,application_span"
      OTEL_EBPF_TRACE_PRINTER: "text"
      OTEL_EBPF_METRICS_INTERVAL: "10ms"
      OTEL_EBPF_BPF_BATCH_TIMEOUT: "10ms"
      OTEL_EBPF_LOG_LEVEL: "DEBUG"
      OTEL_EBPF_BPF_DEBUG: "TRUE"
      OTEL_EBPF_HOSTNAME: "beyla"
      OTEL_EBPF_INTERNAL_METRICS_PROMETHEUS_PORT: 8999
      OTEL_EBPF_INTERNAL_METRICS_PROMETHEUS_PATH: /metrics
      OTEL_EBPF_BPF_HIGH_REQUEST_VOLUME: 1
      # Enable context propagation via environment variables too
      OTEL_EBPF_BPF_CONTEXT_PROPAGATION: "all"
      OTEL_EBPF_BPF_TRACK_REQUEST_HEADERS: "1"
    ports:
      - "8999:8999"

  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.104.0
    container_name: otel-col
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: ["--config=/etc/otelcol-config/otelcol-config-4017.yml"]
    volumes:
      - ./configs/:/etc/otelcol-config
    ports:
      - "4017" # OTLP over gRPC receiver
      - "4018:4018" # OTLP over HTTP receiver
      - "9464" # Prometheus exporter
      - "8888" # metrics endpoint
    depends_on:
      prometheus:
        condition: service_started

  jaeger:
    image: jaegertracing/all-in-one:1.57
    ports:
      - "16686:16686" # Query frontend
      - "4317:4317" # OTEL GRPC traces collector
      - "4318:4318" # OTEL HTTP traces collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v2.55.1
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus-config.yml
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --log.level=debug
    volumes:
      - ./configs/:/etc/prometheus
    ports:
      - "9090:9090"
